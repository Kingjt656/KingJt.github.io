<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>电赛安排</title>
      <link href="/2025/06/04/%E7%94%B5%E8%B5%9B%E5%AE%89%E6%8E%92/"/>
      <url>/2025/06/04/%E7%94%B5%E8%B5%9B%E5%AE%89%E6%8E%92/</url>
      
        <content type="html"><![CDATA[<h1 id="电赛安排"><a href="#电赛安排" class="headerlink" title="电赛安排"></a>电赛安排</h1><h2 id="任务一：驱动移植"><a href="#任务一：驱动移植" class="headerlink" title="任务一：驱动移植"></a>任务一：驱动移植</h2><p>这周日完成所有驱动</p>]]></content>
      
      
      
        <tags>
            
            <tag> 电赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WeiYin_25考核</title>
      <link href="/2025/06/04/WeiYin-25%E8%80%83%E6%A0%B8/"/>
      <url>/2025/06/04/WeiYin-25%E8%80%83%E6%A0%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="微影实验室C语言考核"><a href="#微影实验室C语言考核" class="headerlink" title="微影实验室C语言考核"></a>微影实验室C语言考核</h1><p><a href="https://www.luogu.com.cn/problem/P1427">指针1：小鱼的数字游戏</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">105</span>], *p = arr;</span><br><span class="line">    <span class="comment">// 指针读入数据</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, p) &amp;&amp; *p != <span class="number">0</span>) p++;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指针逆向输出</span></span><br><span class="line">    <span class="keyword">for</span> (p--; p &gt;= arr; p--) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *p);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506041105724.png" alt="image-20250604110531147"></p><p><a href="https://www.luogu.com.cn/problem/B2125">指针2：最高分数的学生姓名</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); <span class="comment">// 读取学生人数</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> max_score = <span class="number">-1</span>;            <span class="comment">// 当前最高分</span></span><br><span class="line">    <span class="type">char</span> max_name[<span class="number">21</span>] = <span class="string">&quot;&quot;</span>;        <span class="comment">// 存放最高分对应的名字</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> score;</span><br><span class="line">        <span class="type">char</span> name[<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %s&quot;</span>, &amp;score, name);  <span class="comment">// 使用scanf读取数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (score &gt; max_score) &#123;</span><br><span class="line">            max_score = score;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用指针拷贝字符串</span></span><br><span class="line">            <span class="type">char</span> *src = name;</span><br><span class="line">            <span class="type">char</span> *dst = max_name;</span><br><span class="line">            <span class="keyword">while</span> ((*dst++ = *src++)); <span class="comment">// 拷贝包括&#x27;\0&#x27;结束符</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, max_name);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506041120445.png" alt="image-20250604112014327"></p>]]></content>
      
      
      
        <tags>
            
            <tag> c语言 </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GD32西门子</title>
      <link href="/2025/06/01/GD32%E8%A5%BF%E9%97%A8%E5%AD%90/"/>
      <url>/2025/06/01/GD32%E8%A5%BF%E9%97%A8%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="西门子GD32"><a href="#西门子GD32" class="headerlink" title="西门子GD32"></a>西门子GD32</h1><h2 id="一、任务调度器"><a href="#一、任务调度器" class="headerlink" title="一、任务调度器"></a>一、任务调度器</h2><h3 id="1、结构体-面经"><a href="#1、结构体-面经" class="headerlink" title="1、结构体 - 面经"></a>1、结构体 - 面经</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011611902.png" alt="image-20250601161118663"></p><p>​结构体在内存中是连续存储的，但可能因为&#x3D;&#x3D;内存对齐&#x3D;&#x3D;而包含填充位</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011614950.png" alt="image-20250601161443823"></p><h3 id="2、定义结构体方法"><a href="#2、定义结构体方法" class="headerlink" title="2、定义结构体方法"></a>2、定义结构体方法</h3><p>​有以下的方法 常用的有 方法二</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011616140.png" alt="image-20250601161604020"></p><h3 id="3、-访问结构体成员"><a href="#3、-访问结构体成员" class="headerlink" title="3、 访问结构体成员"></a>3、 访问结构体成员</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011617364.png" alt="image-20250601161706202"></p><p>​注意：运算符（。）访问的是结构体成员， 而运算符（-&gt;）访问的是结构体指针成员</p><h3 id="4、-结构体嵌套"><a href="#4、-结构体嵌套" class="headerlink" title="4、 结构体嵌套"></a>4、 结构体嵌套</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011621661.png" alt="image-20250601162136520"></p><h2 id="二、-工程创建cubemx配置"><a href="#二、-工程创建cubemx配置" class="headerlink" title="二、 工程创建cubemx配置"></a>二、 工程创建cubemx配置</h2><h3 id="1-时钟配置"><a href="#1-时钟配置" class="headerlink" title="1.时钟配置"></a>1.时钟配置</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011657885.png" alt="image-20250601165745760"></p><p>​时钟决定芯片的运行速度和性能。正确配置时钟开源提升系统性能，还开源降低功耗，延长设备寿命</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011659946.png" alt="image-20250601165924822"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011700074.png" alt="image-20250601170040924"></p><p>​对于高性能的应用，开源配置较高的时钟频率；对于低功耗应用，则可以配置较低的时钟频率。</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011704926.png" alt="image-20250601170426774"></p><p>​内部时钟提供便捷性，外部时钟提供更高的精度</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011708687.png" alt="image-20250601170855628"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011715393.png" alt="image-20250601171521270"></p><p>​学习过程：</p><p>​HSI是微控制器内部集成的RC振荡器 适合低功耗</p><p>​HSE 通常通过连接外部晶振或谐振器实现</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011715863.png" alt="image-20250601171529708"></p><h3 id="2、SYS配置"><a href="#2、SYS配置" class="headerlink" title="2、SYS配置"></a>2、SYS配置</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011723425.png" alt="image-20250601172311245"></p><h3 id="3、-keil工程"><a href="#3、-keil工程" class="headerlink" title="3、 keil工程"></a>3、 keil工程</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011804352.png" alt="image-20250601180406215"></p><p>​STM32库头文件保护：主要规则是确保每个头文件的保护宏唯一，以防止多重包含导致的编译错误。</p><h2 id="三、-外设GPIO与LED"><a href="#三、-外设GPIO与LED" class="headerlink" title="三、 外设GPIO与LED"></a>三、 外设GPIO与LED</h2><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011907043.png" alt="image-20250601190725841"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011907058.png" alt="image-20250601190741891"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011909078.png" alt="image-20250601190943921"></p><h3 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011926875.png" alt="image-20250601192643730"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506012011287.png" alt="image-20250601201105128"></p><h3 id="2、GPIO注意事项"><a href="#2、GPIO注意事项" class="headerlink" title="2、GPIO注意事项"></a>2、GPIO注意事项</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506012047468.png" alt="image-20250601204700315"></p><p>​STM32的GPIO引脚驱动能力通常在 20mA左右</p><h3 id="3、补充PWM"><a href="#3、补充PWM" class="headerlink" title="3、补充PWM"></a>3、补充PWM</h3><p>​简单映射</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506021533436.png" alt="image-20250602153335264"></p><h2 id="四、-KEY与ebtn库"><a href="#四、-KEY与ebtn库" class="headerlink" title="四、 KEY与ebtn库"></a>四、 KEY与ebtn库</h2><h3 id="1、cubemx配置"><a href="#1、cubemx配置" class="headerlink" title="1、cubemx配置"></a>1、cubemx配置</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506021642314.png" alt="image-20250602164245535"></p><p>​看原理图可以配置</p><h3 id="2、-利用github来移植框架"><a href="#2、-利用github来移植框架" class="headerlink" title="2、 利用github来移植框架"></a>2、 利用github来移植框架</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506021654363.png" alt="image-20250602165406203"></p><p>步骤：</p><p>①下载源码 - Git拉取</p><p>②解压并打开 ReadMe - 简单看一下说明文档</p><p>③例子不需要移植，主要移植核心组件库</p><p>④将核心组件库复制</p><p>⑤新建一个文件夹，专门来存储组件库：componet</p><p>⑥把复制过来的组件，放进去</p><p>⑦添加之后，看看keil有没有报错 - 一般好一点的代码框架 代码耦合性都比较低</p><p>⑧后续在 APP中创建自己的应用层 </p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506021724741.png" alt="image-20250602172448602"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506021729406.png" alt="image-20250602172951285"></p><p><a href="https://www.micu.wiki/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%9108%EF%BC%9AKey%E4%B8%8EEasy_Button%E5%BA%93/index.html">使用ebtn库的步骤</a></p><h2 id="五、Uart模块"><a href="#五、Uart模块" class="headerlink" title="五、Uart模块"></a>五、Uart模块</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 西门子杯 </tag>
            
            <tag> GD32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>113AI</title>
      <link href="/2025/05/30/113AI/"/>
      <url>/2025/05/30/113AI/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031736830.png" alt="image-20250603173624768"></p><h2 id="一、-GItHub链接"><a href="#一、-GItHub链接" class="headerlink" title="一、 GItHub链接"></a>一、 GItHub链接</h2><p><a href="https://github.com/harry0703/MoneyPrinterTurbo?tab=readme-ov-file">视频模型链接</a></p><h3 id="1-下载MoneyPrinterTurbo-v1-2-6"><a href="#1-下载MoneyPrinterTurbo-v1-2-6" class="headerlink" title="1. 下载MoneyPrinterTurbo v1.2.6"></a>1. 下载MoneyPrinterTurbo v1.2.6</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505301316272.png" alt="image-20250530131601992"></p><p>​这个软件只需要提供 一个&#x3D;&#x3D;视频主题&#x3D;&#x3D; 或者 &#x3D;&#x3D;关键词&#x3D;&#x3D;，就可以全自动生成一个高清短视频</p><p>​但是由于本地部署电脑配置要求太高，没去部署</p><h3 id="2-Google-AI-Studio"><a href="#2-Google-AI-Studio" class="headerlink" title="2. Google AI Studio"></a>2. Google AI Studio</h3><p><a href="https://aistudio.google.com/generate-video">视频&#x2F;图片链接</a></p><h2 id="二：任务一：AI文生图（免费）"><a href="#二：任务一：AI文生图（免费）" class="headerlink" title="二：任务一：AI文生图（免费）"></a>二：任务一：AI文生图（免费）</h2><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031731573.png" alt="image-20250603173122465"></p><p>使用谷歌Veo2模型来生成，效果是比较好的。</p><h2 id="三、任务二：Ai文生视频"><a href="#三、任务二：Ai文生视频" class="headerlink" title="三、任务二：Ai文生视频"></a>三、任务二：Ai文生视频</h2><p> 谷歌Veo2文本生成视频，对于复杂的内容可能会出现偶尔生成失败的情况。</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031751645.png" alt="image-20250603175145429"></p><h2 id="四、-AI生成PPT"><a href="#四、-AI生成PPT" class="headerlink" title="四、 AI生成PPT"></a>四、 AI生成PPT</h2><h3 id="1、使用AIPPT"><a href="#1、使用AIPPT" class="headerlink" title="1、使用AIPPT"></a>1、使用AIPPT</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031805559.png" alt="image-20250603180520453"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031806971.png" alt="image-20250603180624871"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031807989.png" alt="image-20250603180728752"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031814004.png" alt="image-20250603181450541"></p><h3 id="2、使用DeepSeek-＋KiMi生成PPT"><a href="#2、使用DeepSeek-＋KiMi生成PPT" class="headerlink" title="2、使用DeepSeek ＋KiMi生成PPT"></a>2、使用DeepSeek ＋KiMi生成PPT</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031825450.png" alt="image-20250603182547316"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031826211.png" alt="image-20250603182613108"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031826888.png" alt="image-20250603182659803"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031829129.png" alt="image-20250603182916014"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031831709.png" alt="image-20250603183127503"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031835152.png" alt="image-20250603183325129"></p>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 视频生成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Andesight_BP</title>
      <link href="/2025/05/23/Andesight-BP/"/>
      <url>/2025/05/23/Andesight-BP/</url>
      
        <content type="html"><![CDATA[<h1 id="Andesight-和-BP山景"><a href="#Andesight-和-BP山景" class="headerlink" title="Andesight 和 BP山景"></a>Andesight 和 BP山景</h1><h2 id="一、-Andesight-安装"><a href="#一、-Andesight-安装" class="headerlink" title="一、 Andesight 安装"></a>一、 Andesight 安装</h2><h3 id="1-选择你的文件夹所在地址作为工作空间"><a href="#1-选择你的文件夹所在地址作为工作空间" class="headerlink" title="1. 选择你的文件夹所在地址作为工作空间"></a>1. 选择你的文件夹所在地址作为工作空间</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505231540502.png" alt="image-20250523153354713"></p><h3 id="2-点击导入"><a href="#2-点击导入" class="headerlink" title="2. 点击导入"></a>2. 点击导入</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505231535324.png" alt="image-20250523153502246"></p><h3 id="3-点击常规-并选择现有"><a href="#3-点击常规-并选择现有" class="headerlink" title="3. 点击常规 并选择现有"></a>3. 点击常规 并选择现有</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505251601452.png" alt="image-20250523153556762"></p><h3 id="4-选择根目录-SDK"><a href="#4-选择根目录-SDK" class="headerlink" title="4. 选择根目录 SDK"></a>4. 选择根目录 SDK</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505231536037.png" alt="image-20250523153634958"></p><h2 id="5、-烧录"><a href="#5、-烧录" class="headerlink" title="5、 烧录"></a>5、 烧录</h2><p><img src="/./../../../../AppData/Roaming/Typora/typora-user-images/image-20250527182812803.png" alt="image-20250527182812803"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 山景 </tag>
            
            <tag> Andesight </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2025/05/21/Git/"/>
      <url>/2025/05/21/Git/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在Public中</span><br><span class="line">连接仓库</span><br><span class="line">git init</span><br><span class="line">git remote add origin 地址</span><br><span class="line">git checkout -b main                  </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">上传GIt</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;&quot;</span><br><span class="line">我这里需要连接到远程仓库 因为之前修改过的原因</span><br><span class="line">git remote set-url origin https://github.com/Kingjt656/KingJt.github.io.git</span><br><span class="line">git push --force origin main</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FreeRTOS</title>
      <link href="/2025/05/21/FreeRTOS/"/>
      <url>/2025/05/21/FreeRTOS/</url>
      
        <content type="html"><![CDATA[<h1 id="FreeRTOS"><a href="#FreeRTOS" class="headerlink" title="FreeRTOS"></a>FreeRTOS</h1><h2 id="一-FreeRTOS任务与中断服务程序"><a href="#一-FreeRTOS任务与中断服务程序" class="headerlink" title="一.FreeRTOS任务与中断服务程序"></a>一.FreeRTOS任务与中断服务程序</h2><h3 id="1-cubemx配置注意事项"><a href="#1-cubemx配置注意事项" class="headerlink" title="1.cubemx配置注意事项"></a>1.cubemx配置注意事项</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417157.png" alt="1746930754125"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417275.png" alt="1746930957686"></p><p>可挂起的系统服务请求，这个中断用于上下文切换，在这个中断的ISR里决定哪个任务占用CPU，这一项的抢占优先级为15，最低优先级，只有在没有其他ISR的时候进行上下文的切换</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417225.png" alt="1746931258951"></p><p>Time base应该设置为最高的优先级 0 ，这样FreeRTOS就无法避免HAL库的基础时钟中断</p><h3 id="2-优先级管理和中断"><a href="#2-优先级管理和中断" class="headerlink" title="2.优先级管理和中断"></a>2.优先级管理和中断</h3><p>​注意：在FreeRTOS中，中断优先级的数值越小，优先级越高；</p><p>​    而FreeRTOS的任务优先级是，任务优先级数值越小，任务优先级越低；</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417408.png" alt="1746931983496"></p><p>优先级0 ~ 4的中断是不受FreeRTOS的管理的，称为FreeRTOS不可屏蔽中断；优先级5 ~ 15 称为FreeRTOS可屏蔽中断</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417481.png" alt="1746934996605"></p><p>eg:如果采用中断方式进行ADC数据采集时， 只需要在ADC的中断里将数据读到缓冲区，而对数据进行滤波或者频谱计算等耗时的工作，应该在任务函数中运行。这就涉及到中断ISR与任务函数之间的同步问题了，这就是进程间的通信问题</p><h3 id="3-中断屏蔽和临界代码段"><a href="#3-中断屏蔽和临界代码段" class="headerlink" title="3.中断屏蔽和临界代码段"></a>3.中断屏蔽和临界代码段</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417565.png" alt="1746960166187"></p><p>在某些时候，任务的某段代码可能很关键，需要连续执行完，不希望被其他任务或中断打断，这种程序段称为临界段。</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417271.png" alt="1747038838836"></p><p>​        我们可以使用taskDISABLE_INTERRUPTS()来屏蔽MCU的部分中断，然后使用taskENABLE_INTERRUPTS()就可以解除屏蔽</p><p>​        在临界代码段内，FreeRTOS会暂停任务调度，正在执行的任务是不会被更高优先级的任务抢占的，能够保证代码执行的连续性</p><h3 id="4-在ISR函数中使用FreeRTOS-API函数"><a href="#4-在ISR函数中使用FreeRTOS-API函数" class="headerlink" title="4.在ISR函数中使用FreeRTOS API函数"></a>4.在ISR函数中使用FreeRTOS API函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417183.png" alt="1747039685433"></p><p>注意：在ISR中绝对不能使用任务级API函数，但是在任务函数中使用中断级API函数。而且，在FreeRTOS不能管理的高优先级中断的ISR里，连中断几API函数也不能使用</p><p>进入和退出临界区之间不仅会屏蔽中断，也会关闭任务调度，使得中间的代码无法被其他的任务打断</p><p>注意：我们不能在禁用中断的这个代码段 或者是临界区代码段，调用触发任务调度的函数如：vTaskDelay（）或者是申请信号量进行进程间同步的函数，因为发生任务调度时就会打开中断，从而就会失去定义中断、屏蔽代码段或临界代码段的意义</p><h2 id="二、进程间通信与消息队列"><a href="#二、进程间通信与消息队列" class="headerlink" title="二、进程间通信与消息队列"></a>二、进程间通信与消息队列</h2><h3 id="1-进程间通信的基本概念以及消息队列的原理使用"><a href="#1-进程间通信的基本概念以及消息队列的原理使用" class="headerlink" title="1.进程间通信的基本概念以及消息队列的原理使用"></a>1.进程间通信的基本概念以及消息队列的原理使用</h3><p>①消息队列是信号量 和 互斥量的基础</p><p>②任务 和 ISR可以统称为进程</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417016.png" alt="1747210322563"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417339.png" alt="1747210416864"></p><p> <img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417063.png" alt="1747210616550"></p><p>二值信号量是没有优先级的继承机制，可能会出现优先级翻转问题</p><p>互斥量：互斥量 和 递归互斥量</p><p>互斥量可以用于互斥性共享资源的访问，互斥量具有优先级的继承机制，可以减轻优先级翻转问题</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417152.png" alt="1747216525889"></p><h3 id="2-队列的特点和基本操作"><a href="#2-队列的特点和基本操作" class="headerlink" title="2.队列的特点和基本操作"></a>2.队列的特点和基本操作</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417985.png" alt="1747218372214"></p><p>队列的存储单元可以设置任意大小，可以存储任意数据类型，例如存储一个复杂结构体的数据，队列存储数据采用数据复制的方式，如果数据量比较大，复制数据会占用较大的存储空间，所以如果传递的是比较大的数据：比如比较长的字符串或大的结构体，可以在队列的存储单元里存储需要传递数据的指针</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417963.png" alt="1747220340932"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211421036.png" alt="image-20250521142152925">队列满时，才可以使用这个xQueueOverwrite，但是这个函数只能用于队列长度为1的队列，在队已满时，它会覆盖队列原来的数据</p><p>其中xQueueReceive可以读取数据并删除已经读取的数据</p><p>而xQueuePeek也可以读取数据，但是不能删除数据  </p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417310.png" alt="1747364953722"></p><p>第一个vTaskDelay,让它每300ms只允许传入一个键值，也起到一个消抖的作用</p><p>我们还需要考虑没有扫描到按键的情况，我们需要给它一个5ms的延时，让它处于阻塞状态，然后让其他的任务得以调度</p><p>注意：在每个任务函数中，无论任务如果运行，都必须有一个延时，让其他的任务进行调度 </p><h2 id="三、信号量"><a href="#三、信号量" class="headerlink" title="三、信号量"></a>三、信号量</h2><p>​有的时候进程间需要传递的只是一个标志，用于进程间同步 或 对一个共享资源的互斥性访问，这个时候就可以使用信号量和互斥量；信号量和互斥量的实现都是基于队列的。</p><p>​信号量更适合用于进程间同步，而互斥量更适合用于共享资源的互斥性访问</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417620.png" alt="1747552095441"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417977.png" alt="1747552153542"></p><h3 id="1、二值信号量"><a href="#1、二值信号量" class="headerlink" title="1、二值信号量"></a>1、二值信号量</h3><p>​二值信号量就是只有一个项的队列。二值信号量就像一个标志，要么是空、要么是满，适合用于进程间同步的通信。所以说相当于只有0 和 1两种值</p><h3 id="2、计数型信号量"><a href="#2、计数型信号量" class="headerlink" title="2、计数型信号量"></a>2、计数型信号量</h3><p>​计数型信号量就是有固定长度的队列，每个项是一个标志。计数型信号量常用于多个共享资源的访问控制</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417955.png" alt="1747565788527"></p><p>​如果计数信号量的值为0，那么（以上4张桌子）的资源都被占用了，再有（客人）想进店，就需要等待；在任务中申请信号量时，可以设置超时等待时间，在等待时，任务就进入阻塞状态；当一个（客人）用餐结束就可以释放，也就是Give信号量，计数信号量的值加1，表示可用资源的数量增加了一个，这个适合就可以供其他的任务或者ISR来进行使用</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505221452190.png" alt="image-20250522145256923"></p><p>​注意：对于FromISR的函数，大部分都有一个参数，用来试图解决优先级翻转问题</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505221454749.png" alt="image-20250522145450506"></p><p>使用portYIELD_FROM_ISR函数，在可能的情况下进行一次任务调度</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505221456653.png" alt="image-20250522145645413"></p><p>只有在信号量不为空的时候，才需要释放信号量</p><h2 id="四、互斥量"><a href="#四、互斥量" class="headerlink" title="四、互斥量"></a>四、互斥量</h2><p><img src="/./../../../../AppData/Roaming/Typora/typora-user-images/image-20250522153947332.png" alt="image-20250522153947332"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417004.png" alt="1747567070728"></p><p>​互斥量是对信号量的优化；信号量存在优先级翻转的问题，使得系统的实时性变差。互斥量引入了优先级集成机制，可以减缓优先级翻转问题,但是不能完全消除；</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417849.png" alt="1747570441679"></p><h3 id="1、二值信号量和互斥量的区别"><a href="#1、二值信号量和互斥量的区别" class="headerlink" title="1、二值信号量和互斥量的区别"></a>1、二值信号量和互斥量的区别</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505221944293.png" alt="1747570673697"></p><p>​注意：互斥量不可以在ISR中使用，因为互斥量是具有任务的优先级的继承机制，而ISR不是任务。另外，ISR函数中不能设置阻塞等待时间，而获取互斥量时经常是需要等待的。</p><h3 id="2、递归互斥量"><a href="#2、递归互斥量" class="headerlink" title="2、递归互斥量"></a>2、递归互斥量</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211418537.png" alt="1747571101136"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211418071.png" alt="1747572966977"></p><pre><code>注意：xSemaphoreGive(xSemaphore) 这个函数不仅可以释放二值信号量，也可以释放计数信号量 和 互斥量，所以说xSemaphore可以是这三种对象的句柄</code></pre><p>​同样的，xSemaphoreTake（xSwemaphore,xBlockTime）不仅可以用于获取二值信号量，还可以用于获取计数信号量 和 互斥量</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505221941187.png" alt="image-20250522165304687"></p><p>获取信号量也有一个返回值，如果获取成功，则获取信号量函数的值为pdTRUE</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505221941866.png" alt="image-20250522190204337"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505221948965.png" alt="image-20250522194807750"></p><p>​Task_Middle is running打印两次，其中它是每500ms发送一次，我们可以看到低优先级获取信号量和释放信号量之间Task_Middle发送了两次消息，那在Task_Low释放了二值信号量之后，Task_High就立马抢占了运行，发送了一条Task_High Get token ，这个例子可以看到明显的优先级翻转现象</p><p>​优先级翻转现象导致了高优先级的任务不能计时运行，违背了抢占式任务调度的设计初衷，对系统的实时性是不利的。</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505222015259.png" alt="image-20250522201544169"></p><p>​由于使用互  斥量，所以说高优先级任务在试图获取互斥量时，如果互斥量被Task_Low占用着，拿FreeRTOS会将它Task_Low的优先级临时提高到Task_High的优先级，这样在Task_Low占用互斥量的运行期间,Task_Middle就无法抢占CPU运行。</p><p>​只有在Task_Low释放互斥量之后，Task_High才能抢占CPU立即运行</p><p>​因此，使用互斥量就避免了高优先级任务被中等优先级任务插队运行的情况。</p><h2 id="五、事件组"><a href="#五、事件组" class="headerlink" title="五、事件组"></a>五、事件组</h2><h3 id="1、事件组概念"><a href="#1、事件组概念" class="headerlink" title="1、事件组概念"></a>1、事件组概念</h3><p>​事件组使用与多个事件触发一个或多个任务的运行，可以实现事件的广播，还可以实现多个任务的同步运行</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505222032741.png" alt="image-20250522203146760"></p><p>​如果要处理多个事件，一般情况下，需要分解为多个任务，设置多个信号量；其次，可能有多个任务等待同一个事件的发生，但是在事件发生时，只能解除最高优先级的任务的阻塞状态，而不能同时解除多个任务的组设状态，也就是说 <strong>队列</strong> 或 <strong>信号量</strong> 具有排他性，不能解决某些特定的问题</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505222051628.png" alt="image-20250522205153402"></p><p>​事件组允许任务等待一个或多个事件的组合，事件组会解除所有等待同一事件的任务的阻塞状态</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505222102870.png" alt="image-20250522210219714"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505222112184.png" alt="image-20250522211223957"></p><p>​①事件标志只能是0 或 1，用单独的一个位来存储。</p><p>​②如果一个事件位被设置为1，则表示这个事件发生了。反之，为0表示事件未发生</p><p>​③32位的事件组最多可以处理24个事件。</p><p>​④事件组具有广播功能，可以使多个任务同时解除阻塞后运行</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505232131210.png" alt="image-20250523213107048"></p><h3 id="2-事件组的多任务同步使用"><a href="#2-事件组的多任务同步使用" class="headerlink" title="2. 事件组的多任务同步使用"></a>2. 事件组的多任务同步使用</h3><pre><code>通过事件组进行多任务同步，在事件组的条件成立时，多个任务的阻塞状态可以同时解除，利用事件组的这个特性，可以实现多任务的同步。</code></pre><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505232136456.png" alt="image-20250523213608254"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505232154858.png" alt="image-20250523215423638"></p><p>​多个任务在某个同步点同步运行</p><p>​函数xEventGroupSync可以替代这两个函数实现一步操作，用于实现多任务之间的同步。</p><h2 id="六、-任务通知"><a href="#六、-任务通知" class="headerlink" title="六、 任务通知"></a>六、 任务通知</h2><p>​使用任务通知，不需要创建任何的中间对象，可以直接从任务向任务，或者从ISR向任务发送通知，任务通知可以模拟二值信号量，计数信号量或者长度为1的消息队列。使用任务通知通常效率更高，消耗内存更少。</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505241404904.png" alt="image-20250524140353049"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505241408428.png" alt="image-20250524140813177"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505241408715.png" alt="image-20250524140835507"></p><p>​注意：发送者可以是任务和ISR，接收者只能是任务，不能是ISR</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505241425106.png" alt="image-20250524142519872"></p><p>​注意：任务通知的局限性：不能向ISR发送通知，只能是任务或ISR函数向任务发送通知</p><h3 id="1-任务通知相关函数"><a href="#1-任务通知相关函数" class="headerlink" title="1. 任务通知相关函数"></a>1. 任务通知相关函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505241457159.png" alt="image-20250524145718905"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505241501845.png" alt="image-20250524150111607"></p><h3 id="2-任务通知传递数据"><a href="#2-任务通知传递数据" class="headerlink" title="2. 任务通知传递数据"></a>2. 任务通知传递数据</h3><p>​使用任务通知来传递数据，使用中断方式进行ADC，然后通过任务通知，将ADC转换结果作为通知值发送给另一个任务加以显示</p><h2 id="七、-软件定时器"><a href="#七、-软件定时器" class="headerlink" title="七、 软件定时器"></a>七、 软件定时器</h2><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505251749432.png" alt="image-20250525174932172"></p><p>​定时器被创建后，有休眠 和 运行 两种状态；并且，处于休眠状态的定时器不会执行其回调函数；</p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505251752060.png" alt="image-20250525175245866"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505251802226.png" alt="image-20250525180256017"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505251805105.png" alt="image-20250525180557935"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505261305748.png" alt="image-20250526130513490"></p><h2 id="八、-韦东山笔记"><a href="#八、-韦东山笔记" class="headerlink" title="八、 韦东山笔记"></a>八、 韦东山笔记</h2><h3 id="1、-各类方法的对比"><a href="#1、-各类方法的对比" class="headerlink" title="1、 各类方法的对比"></a>1、 各类方法的对比</h3><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505281111346.png" alt="image-20250528111144244"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505281120554.png" alt="image-20250528112020186"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505281126574.png" alt="image-20250528112610479"></p>]]></content>
      
      
      
        <tags>
            
            <tag> FreeRTOS </tag>
            
            <tag> 实时操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音响硬件实习</title>
      <link href="/2025/05/21/Music/"/>
      <url>/2025/05/21/Music/</url>
      
        <content type="html"><![CDATA[<h1 id="音响硬件实习"><a href="#音响硬件实习" class="headerlink" title="音响硬件实习"></a>音响硬件实习</h1><h2 id="一、功放板选购"><a href="#一、功放板选购" class="headerlink" title="一、功放板选购"></a>一、功放板选购</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">链接：以下</span><br></pre></td></tr></table></figure><p><a href="https://detail.1688.com/offer/796370077575.html?share_token=3xY4ketpfMvaENbRGbU9sQXC8mdgqgxW6hKqVop3T75CVNlcNbjvGw==&__share_id=9a6d948d-1141-4614-b2d1-0ffbe407dd4e&rpg-cnt=share.offerDetail&offerId=796370077575&__zhi_token=Gf24PCZ007zas&spm=a262eq.8992535/20250520.5103953.0">功放板链接D800 - </a></p><p><a href="https://detail.1688.com/offer/861886414514.html?share_token=S+bh7nIMimb+68/jCmKYr88cpzMuBJbYdIfai76eemETLPOctuYRtg==&__share_id=138f3861-0a56-40c8-82df-a13f1f7ff399&rpg-cnt=share.offerDetail&offerId=861886414514&__zhi_token=zbln1gS64idaw&spm=a262eq.8992535/20250531.5103953.0">功放板D1000</a></p><p><img src="/./../../../../AppData/Roaming/Typora/typora-user-images/image-20250603222854660.png" alt="image-20250603222854660"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505201848820.png" alt="image-20250520184824510"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505201849706.png" alt="image-20250520184937514"></p><p><img src="https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505201922370.png" alt="image-20250520192243197"></p><h3 id="🔧-一、功能模块详解"><a href="#🔧-一、功能模块详解" class="headerlink" title="🔧 一、功能模块详解"></a>🔧 一、功能模块详解</h3><h3 id="1-1、主芯片（功放IC）"><a href="#1-1、主芯片（功放IC）" class="headerlink" title="1.1、主芯片（功放IC）"></a>1.1、主芯片（功放IC）</h3><p>​以上的功放板是基于<strong>TPA3116D2</strong>的多功能数字功放板，具有多个音频输入方式和多种调节功能，适用于DIY音箱、家庭影院、K歌设备等场景。</p><p>①<strong>TPA3116D2 ×2（双通道）</strong></p><ul><li>来自德州仪器（TI）的高性能D类数字功放芯片。</li><li><strong>支持双声道（立体声）或桥接模式</strong>，50W + 50W + 100W。</li><li><strong>效率高、发热低、失真小</strong>，适用于中小型功放应用。</li></ul><h3 id="1-2、-电源输入"><a href="#1-2、-电源输入" class="headerlink" title="1.2、 电源输入"></a>1.2、 电源输入</h3><ul><li><strong>支持12V~24V直流电源输入</strong><ul><li>适配不同功率需求的音响系统。</li><li>输入电压越高，可驱动的扬声器功率越大。</li></ul></li></ul><h3 id="1-3、音频输出接口"><a href="#1-3、音频输出接口" class="headerlink" title="1.3、音频输出接口"></a>1.3、音频输出接口</h3><ul><li><p><strong>左声道、右声道、低音炮</strong>输出端子（接喇叭）：</p><ul><li>实现2.1声道输出，带有<strong>独立的低音通道</strong>（Subwoofer）；</li></ul><p>其中2.1声道：<strong>2.1声道输出</strong>（左右声道+低音炮独立通道）</p><ul><li>适合中高频+低音分频的音响结构，提高音质表现。</li></ul></li></ul><h3 id="1-4、音频输入方式："><a href="#1-4、音频输入方式：" class="headerlink" title="1.4、音频输入方式："></a>1.4、音频输入方式：</h3><ul><li><strong>USB输入</strong>：直接连接电脑或数字源播放；</li><li><strong>AUX输入</strong>：3.5mm模拟音频输入；</li><li><strong>话筒模块接口</strong>：可连接麦克风用于K歌；</li><li><strong>引线式按键板接口</strong>：用于扩展遥控、模式切换等按键控制。</li></ul><h3 id="🎛️-二、调节功能详解"><a href="#🎛️-二、调节功能详解" class="headerlink" title="🎛️ 二、调节功能详解"></a>🎛️ 二、调节功能详解</h3><h3 id="2-1-功能旋钮（主板上）："><a href="#2-1-功能旋钮（主板上）：" class="headerlink" title="2.1 功能旋钮（主板上）："></a>2.1 功能旋钮（主板上）：</h3><table><thead><tr><th>调节项</th><th>说明</th></tr></thead><tbody><tr><td>低音炮频率（20-200Hz）</td><td>调整低音通道的分频点；滤掉中高频信号，只输出低频。</td></tr><tr><td>SUBWOOFER 音量调节</td><td>控制低音炮输出音量。</td></tr><tr><td>TREBLE（高音调节）</td><td>调节左右声道的高频增益，增强细节表现力。</td></tr><tr><td>BASS（低音调节）</td><td>调节左右声道的低频增益，增强低频厚度。</td></tr><tr><td>M-VOL（总音量+开关）</td><td>控制整机输出音量，并带电源开关功能。</td></tr></tbody></table><h3 id="2-2-外接麦克风模块调节："><a href="#2-2-外接麦克风模块调节：" class="headerlink" title="2.2 外接麦克风模块调节："></a>2.2 外接麦克风模块调节：</h3><table><thead><tr><th>接口</th><th>说明</th></tr></thead><tbody><tr><td>麦克风接口D1&#x2F;D2</td><td>插入话筒，进行语音输入或K歌；</td></tr><tr><td>麦克风风量调节</td><td>调整话筒接收灵敏度（电平）</td></tr><tr><td>麦克风音量调节</td><td>调整话筒声音在输出音频中的占比</td></tr></tbody></table><h3 id="🔌-三、接口一览与连接方式"><a href="#🔌-三、接口一览与连接方式" class="headerlink" title="🔌 三、接口一览与连接方式"></a>🔌 三、接口一览与连接方式</h3><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>左&#x2F;右声道输出</td><td>接普通全频&#x2F;高频喇叭</td></tr><tr><td>低音输出（Sub）</td><td>接低音喇叭</td></tr><tr><td>USB接口</td><td>音频输入接口（数字音频）</td></tr><tr><td>AUX接口</td><td>音频输入接口（模拟音频）</td></tr><tr><td>麦克风接口 D1&#x2F;D2</td><td>音频输入（人声）</td></tr><tr><td>电源输入（DC 12~24V）</td><td>提供整板供电</td></tr><tr><td>控制板扩展口</td><td>扩展物理按键板（播放&#x2F;暂停等）</td></tr></tbody></table><h3 id="📚-四、相关知识点总结"><a href="#📚-四、相关知识点总结" class="headerlink" title="📚 四、相关知识点总结"></a>📚 四、相关知识点总结</h3><h3 id="4-1-TPA3116D2-芯片知识"><a href="#4-1-TPA3116D2-芯片知识" class="headerlink" title="4.1 TPA3116D2 芯片知识"></a>4.1 TPA3116D2 芯片知识</h3><ul><li>属于D类（Class-D）数字功放；</li><li>内建高效率开关电源转换器；</li><li>优点：<ul><li>高效率</li><li>体积小、发热低</li><li>支持双通道模式</li></ul></li></ul><h3 id="4-2-功放的基本概念"><a href="#4-2-功放的基本概念" class="headerlink" title="4.2 功放的基本概念"></a>4.2 功放的基本概念</h3><table><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>功放（Amplifier）</td><td>把微弱音频信号放大到足以推动扬声器的电平。</td></tr><tr><td>2.1声道</td><td>左声道+右声道+低音通道（独立Subwoofer）</td></tr><tr><td>分频器</td><td>将不同频率段信号分送给不同扬声器（如高频&#x2F;低频）</td></tr></tbody></table><h3 id="4-3-音频参数调节基础"><a href="#4-3-音频参数调节基础" class="headerlink" title="4.3 音频参数调节基础"></a>4.3 音频参数调节基础</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>高音（Treble）</td><td>3KHz以上频率，提升清晰度和细节。</td></tr><tr><td>低音（Bass）</td><td>300Hz以下频率，提升沉浸感。</td></tr><tr><td>总音量（Master Volume）</td><td>控制整体输出电平。</td></tr><tr><td>频率调节（低音分频）</td><td>影响低音通道的响应范围，低于设定频率的声音才会输出到低音炮。</td></tr></tbody></table><h3 id="🔊-五、音频输出与功率参数"><a href="#🔊-五、音频输出与功率参数" class="headerlink" title="🔊 五、音频输出与功率参数"></a>🔊 五、音频输出与功率参数</h3><table><thead><tr><th>参数</th><th>含义与作用</th></tr></thead><tbody><tr><td><strong>声道数：2.1声道（50W + 50W + 100W）</strong></td><td>2.1声道指的是： ① 左声道：最大50W ② 右声道：最大50W ③ 低音炮：最大100W                                                                          这种设计可以输出更加立体的音效，特别增强低频震撼感，适合观影和音乐。</td></tr><tr><td><strong>适配喇叭</strong></td><td>左右声道：20-50W、4-8Ω 低音炮：100W、4-8Ω                                                                                                                              ➡ 匹配范围比较广，可以兼容多数常见音响单元（例如6.5寸、8寸、10寸喇叭等）。（5 ~ 6.5寸低音喇叭）</td></tr></tbody></table><h2 id="二、喇叭选购"><a href="#二、喇叭选购" class="headerlink" title="二、喇叭选购"></a>二、喇叭选购</h2><p><a href="https://m.1688.com/offer/741573652131.html?spm=a262to.11649712.wpAllOfferList_wangpu_score.0&__share_id=9c61b7b2-aa6e-4985-857d-07247c063589&callByHgJs=1&__removesafearea__=1&cbu_sv_id=ee222a83-1ef2-42be-9c0c-28089497b013&src_cna=ew6qIOSm2GIBASQIhFm54zEG&visitorId=ee222a83-1ef2-42be-9c0c-28089497b013">喇叭-高音 2.5寸4欧姆 15W</a></p><p><a href="https://detail.1688.com/offer/704974279847.html?spm=a262to.11649712.wpAllOfferList_wangpu_score.0&__share_id=9c61b7b2-aa6e-4985-857d-07247c063589&callByHgJs=1&__removesafearea__=1&cbu_sv_id=ee222a83-1ef2-42be-9c0c-28089497b013&src_cna=ew6qIOSm2GIBASQIhFm54zEG&visitorId=ee222a83-1ef2-42be-9c0c-28089497b013">喇叭-低音 5.25寸4欧姆 30w</a></p><p><a href="https://detail.1688.com/offer/763805762010.html?spm=a262to.11649712.wpAllOfferList_wangpu_score.0&__share_id=9c61b7b2-aa6e-4985-857d-07247c063589&callByHgJs=1&__removesafearea__=1&cbu_sv_id=ee222a83-1ef2-42be-9c0c-28089497b013&src_cna=ew6qIOSm2GIBASQIhFm54zEG&visitorId=ee222a83-1ef2-42be-9c0c-28089497b013">喇叭-低音 6.5寸4欧姆 40W</a></p><h3 id="1-不同喇叭类型特点比较"><a href="#1-不同喇叭类型特点比较" class="headerlink" title="1. 不同喇叭类型特点比较"></a>1. 不同喇叭类型特点比较</h3><table><thead><tr><th>类型</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>全频喇叭（如15W款）</strong></td><td>可涵盖大部分频段（低<del>中</del>高）</td><td>小音箱&#x2F;广播&#x2F;简单音乐播放</td></tr><tr><td><strong>中高音喇叭（如10W款）</strong></td><td>强调高频细节，缺低音</td><td>高频补偿、报警提示、高音箱</td></tr></tbody></table><h3 id="2-功放芯片与喇叭匹配原则（以TPA3116D2为例）"><a href="#2-功放芯片与喇叭匹配原则（以TPA3116D2为例）" class="headerlink" title="2. 功放芯片与喇叭匹配原则（以TPA3116D2为例）"></a>2. 功放芯片与喇叭匹配原则（以TPA3116D2为例）</h3><table><thead><tr><th>匹配要点</th><th>推荐范围</th><th>错误搭配后果</th></tr></thead><tbody><tr><td><strong>阻抗匹配</strong></td><td>4Ω</td><td>&gt;30Ω 时输出功率锐减，音量小</td></tr><tr><td><strong>功率匹配</strong></td><td>喇叭额定功率 ≈ 功放最大输出功率</td><td>功率不匹配易烧喇叭或音量不足</td></tr><tr><td><strong>灵敏度选择</strong></td><td>≥85dB</td><td>低灵敏度喇叭声音小，需更大功率</td></tr><tr><td><strong>频响适配</strong></td><td>与应用场景匹配（如人声推荐120Hz~15kHz）</td><td>高音不足或低音缺失</td></tr></tbody></table><h3 id="3-喇叭参数对比表"><a href="#3-喇叭参数对比表" class="headerlink" title="3. 喇叭参数对比表"></a>3. 喇叭参数对比表</h3><table><thead><tr><th>参数</th><th>喇叭-高音 2.5寸4欧姆 15W</th><th>喇叭-低音 5.25寸4欧姆 30w</th><th>喇叭-低音 6.5寸4欧姆 40W</th></tr></thead><tbody><tr><td>型号</td><td>LY-0002800-3</td><td>LY-0003146</td><td>LY-0003735</td></tr><tr><td>尺寸</td><td>口径67mm</td><td>口径132.5mm</td><td>口径171mm</td></tr><tr><td>额定功率</td><td>15W</td><td>30W</td><td>40W</td></tr><tr><td>阻抗</td><td>4Ω</td><td>4Ω</td><td>4Ω</td></tr><tr><td>频率响应</td><td>130Hz - 12KHz</td><td>57Hz – 2kHz</td><td>51Hz – 4.5kHz</td></tr><tr><td>灵敏度</td><td>82 ± 2 dB</td><td>84 ± 2 dB</td><td>84.5 ± 2 dB</td></tr><tr><td>谐波失真</td><td>5%</td><td>5%</td><td>5%</td></tr><tr><td>磁路结构</td><td>外磁式</td><td>外磁式</td><td>外磁式</td></tr><tr><td>音圈</td><td>16芯</td><td>20芯</td><td>25芯</td></tr><tr><td>重量</td><td>0.23kg</td><td>0.54kg</td><td>0.886kg</td></tr><tr><td>频率特性</td><td>全频带（全音域）</td><td>中低频带</td><td>中低频带</td></tr></tbody></table><h3 id="4-核心参数对声音的影响"><a href="#4-核心参数对声音的影响" class="headerlink" title="4. 核心参数对声音的影响"></a>4. 核心参数对声音的影响</h3><table><thead><tr><th>参数</th><th>影响分析</th></tr></thead><tbody><tr><td><strong>尺寸（口径）</strong></td><td>决定喇叭推动空气量的能力。- 大尺寸（如6.5寸）→ 低频强、下潜深，有力感。- 小尺寸（如2.5寸）→ 高频响应更快，适合播放人声细节和高频延伸。</td></tr><tr><td><strong>额定功率</strong></td><td>表示喇叭长期工作的最大安全功率。- 功率越大，音响的动态余量越充足，爆发力更好。</td></tr><tr><td><strong>阻抗（4Ω）</strong></td><td>影响与功放的匹配。- 通常4Ω阻抗更容易被驱动，适合家用功放。- 多喇叭串联&#x2F;并联时需注意总阻抗匹配。</td></tr><tr><td><strong>频率响应</strong></td><td>描述喇叭能发出声音的频率范围。- 响应范围越宽，声音层次越丰富。- 低频起点低（如51Hz）→ 低音更沉稳。- 高频终点高（如12kHz）→ 更有空气感、清晰度高。</td></tr><tr><td><strong>灵敏度（dB）</strong></td><td>表示喇叭发出相同音量所需输入功率的大小。- 数值越高，越容易出声（效率高）。- 82dB属中等偏低，适合安静环境；85dB以上则更省力。</td></tr><tr><td><strong>谐波失真（THD）</strong></td><td>表示喇叭播放音频时的失真程度。- 5%为中等水平。- 失真越小，声音越纯净。</td></tr><tr><td><strong>磁路结构</strong></td><td>决定磁场强度和控制力。- 外磁式：结构简单，散热好，广泛用于家用音箱。- 内磁双磁：磁力集中，体积小，控制力更强，适合精细高频。</td></tr><tr><td><strong>音圈尺寸</strong></td><td>影响喇叭的功率承载与控制力。- 音圈越大→ 耐热能力强，控制低频更好。- 25芯适合高功率、大动态需求。</td></tr><tr><td><strong>重量</strong></td><td>一定程度反映磁体体积与用料。- 重量大，低频更有力，结构更稳固。- 太轻则音色可能发飘或单薄。</td></tr></tbody></table><h2 id="三、壁挂音响"><a href="#三、壁挂音响" class="headerlink" title="三、壁挂音响"></a>三、壁挂音响</h2><p>【15周任务】喇叭厚度 不超过5cm 不是圆体壁挂音响 2 - 4个喇叭</p><p>TPA芯片 - 音质</p>]]></content>
      
      
      
        <tags>
            
            <tag> 音响实习 </tag>
            
            <tag> 功放板 </tag>
            
            <tag> 喇叭 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/friend/index.html"/>
      <url>/friend/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="本站信息"><a href="#本站信息" class="headerlink" title="本站信息"></a>本站信息</h2><ul><li>站名： 拔剑Sketon</li><li>站长： 拔剑Sketon</li><li>地址： <a href="https://d-sketon.top/">https://d-sketon.top/</a></li><li>备用地址：<a href="https://d-sketon.github.io/">https://d-sketon.github.io/</a></li></ul><h2 id="申请方法"><a href="#申请方法" class="headerlink" title="申请方法"></a>申请方法</h2><ul><li>添加本站后，在本页留言，格式如下</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">```yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="comment">#您的名字</span></span><br><span class="line">  <span class="attr">url:</span> <span class="comment">#您的网址</span></span><br><span class="line">  <span class="attr">desc:</span> <span class="comment">#简短描述</span></span><br><span class="line">  <span class="attr">image:</span> <span class="comment">#一张图片</span></span><br><span class="line"><span class="string">```</span></span><br></pre></td></tr></table></figure><h2 id="小伙伴们"><a href="#小伙伴们" class="headerlink" title="小伙伴们"></a>小伙伴们</h2><div class="friend-wrap" data-aos="zoom-in"><div class="friend-item-wrap">    <a href="https://kinggit.netlify.app" rel="noopener external nofollow noreferrer" target="_blank"></a>    <div class="friend-icon-wrap">      <div class="friend-icon">          <img data-src="https://kinggit.netlify.app/avatar/avatar.jpg" data-sizes="auto" alt="KingJt" class="lazyload">      </div>    </div>    <div class="friend-info-wrap">      <div class="friend-name">          KingJt       </div>      <div class="friend-desc">        记录生活，分享技术      </div>    </div>  </div><div class="friend-item-wrap">    <a href="https://d-sketon.github.io/" rel="noopener external nofollow noreferrer" target="_blank"></a>    <div class="friend-icon-wrap">      <div class="friend-icon">          <img data-src="https://d-sketon.github.io/avatar/avatar.webp" data-sizes="auto" alt="D-Sketon" class="lazyload">      </div>    </div>    <div class="friend-info-wrap">      <div class="friend-name">          D-Sketon       </div>      <div class="friend-desc">        一个车万人      </div>    </div>  </div><div class="friend-item-wrap">    <a href="https://mextra.netlify.app/" rel="noopener external nofollow noreferrer" target="_blank"></a>    <div class="friend-icon-wrap">      <div class="friend-icon">          <img data-src="https://mextra.netlify.app/avatar/writer.jpg" data-sizes="auto" alt="Mextra" class="lazyload">      </div>    </div>    <div class="friend-info-wrap">      <div class="friend-name">          Mextra       </div>      <div class="friend-desc">        一个双非的CV工程师      </div>    </div>  </div></div>]]></content>
      
    </entry>
    
    
  
</search>
