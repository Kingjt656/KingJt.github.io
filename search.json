[{"title":"电赛安排","url":"/2025/06/04/电赛安排/","content":"\n# 电赛安排\n\n## 任务一：驱动移植\n\n这周日完成所有驱动\n","tags":["电赛"]},{"title":"WeiYin_25考核","url":"/2025/06/04/WeiYin-25考核/","content":"\n# 微影实验室C语言考核\n\n[指针1：小鱼的数字游戏](https://www.luogu.com.cn/problem/P1427)\n\n```c\n#include <stdio.h>\nint main() {\n    int arr[105], *p = arr;\n    // 指针读入数据\n    while (scanf(\"%d\", p) && *p != 0) p++;\n    \n    // 指针逆向输出\n    for (p--; p >= arr; p--) \n        printf(\"%d \", *p);\n    \n    return 0;\n}\n```\n\n![image-20250604110531147](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506041105724.png)\n\n[指针2：最高分数的学生姓名](https://www.luogu.com.cn/problem/B2125)\n\n```c\n#include <stdio.h>\n#include <string.h>\n\nint main() {\n    int n;\n    scanf(\"%d\", &n); // 读取学生人数\n\n    int max_score = -1;            // 当前最高分\n    char max_name[21] = \"\";        // 存放最高分对应的名字\n\n    for (int i = 0; i < n; i++) {\n        int score;\n        char name[21];\n\n        scanf(\"%d %s\", &score, name);  // 使用scanf读取数据\n\n        if (score > max_score) {\n            max_score = score;\n\n            // 使用指针拷贝字符串\n            char *src = name;\n            char *dst = max_name;\n            while ((*dst++ = *src++)); // 拷贝包括'\\0'结束符\n        }\n    }\n\n    printf(\"%s\\n\", max_name);\n    return 0;\n}\n\n```\n\n![image-20250604112014327](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506041120445.png)\n\n\n\n\n\n","tags":["c语言","指针"]},{"title":"GD32西门子","url":"/2025/06/01/GD32西门子/","content":"\n# 西门子GD32\n\n## 一、任务调度器\n\n### 1、结构体 - 面经\n\n![image-20250601161118663](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011611902.png)\n\n​\t结构体在内存中是连续存储的，但可能因为==内存对齐==而包含填充位\n\n![image-20250601161443823](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011614950.png)\n\n### 2、定义结构体方法\n\n​\t有以下的方法 常用的有 方法二\n\n![image-20250601161604020](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011616140.png)\n\n### 3、 访问结构体成员\n\n![image-20250601161706202](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011617364.png)\n\n​\t注意：运算符（。）访问的是结构体成员， 而运算符（->）访问的是结构体指针成员\n\n### 4、 结构体嵌套\n\n![image-20250601162136520](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011621661.png)\n\n## 二、 工程创建cubemx配置\n\n### 1.时钟配置\n\n![image-20250601165745760](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011657885.png)\n\n​\t时钟决定芯片的运行速度和性能。正确配置时钟开源提升系统性能，还开源降低功耗，延长设备寿命\n\n![image-20250601165924822](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011659946.png)\n\n![image-20250601170040924](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011700074.png)\n\n​\t对于高性能的应用，开源配置较高的时钟频率；对于低功耗应用，则可以配置较低的时钟频率。\n\n![image-20250601170426774](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011704926.png)\n\n​\t内部时钟提供便捷性，外部时钟提供更高的精度\n\n![image-20250601170855628](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011708687.png)\n\n![image-20250601171521270](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011715393.png)\n\n​\t学习过程：\n\n​\tHSI是微控制器内部集成的RC振荡器 适合低功耗\n\n​\tHSE 通常通过连接外部晶振或谐振器实现\n\n![image-20250601171529708](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011715863.png)\n\n### 2、SYS配置\n\n![image-20250601172311245](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011723425.png)\n\n### 3、 keil工程\n\n![image-20250601180406215](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011804352.png)\n\n​\tSTM32库头文件保护：主要规则是确保每个头文件的保护宏唯一，以防止多重包含导致的编译错误。\n\n## 三、 外设GPIO与LED\n\n![image-20250601190725841](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011907043.png)\n\n![image-20250601190741891](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011907058.png)\n\n![image-20250601190943921](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011909078.png)\n\n### 1. 初始化\n\n![image-20250601192643730](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506011926875.png)\n\n![image-20250601201105128](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506012011287.png)\n\n### 2、GPIO注意事项\n\n![image-20250601204700315](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506012047468.png)\n\n​\t\tSTM32的GPIO引脚驱动能力通常在 20mA左右\n\n###  3、补充PWM\n\n​\t简单映射\n\n![image-20250602153335264](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506021533436.png)\n\n## 四、 KEY与ebtn库\n\n### 1、cubemx配置\n\n![image-20250602164245535](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506021642314.png)\t\n\n​\t看原理图可以配置\n\n### 2、 利用github来移植框架\n\n![image-20250602165406203](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506021654363.png)\n\n步骤：\n\n①下载源码 - Git拉取\n\n②解压并打开 ReadMe - 简单看一下说明文档\n\n③例子不需要移植，主要移植核心组件库\n\n④将核心组件库复制\n\n⑤新建一个文件夹，专门来存储组件库：componet\n\n⑥把复制过来的组件，放进去\n\n⑦添加之后，看看keil有没有报错 - 一般好一点的代码框架 代码耦合性都比较低\n\n⑧后续在 APP中创建自己的应用层 \n\n![image-20250602172448602](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506021724741.png)\n\n![image-20250602172951285](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506021729406.png)\n\n[使用ebtn库的步骤](https://www.micu.wiki/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%9108%EF%BC%9AKey%E4%B8%8EEasy_Button%E5%BA%93/index.html)\n\n##  五、Uart模块\n\n","tags":["西门子杯","GD32"]},{"title":"113AI","url":"/2025/05/30/113AI/","content":"\n![image-20250603173624768](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031736830.png)\n\n\n\n## 一、 GItHub链接\n\n[视频模型链接](https://github.com/harry0703/MoneyPrinterTurbo?tab=readme-ov-file)\n\n### 1. 下载MoneyPrinterTurbo v1.2.6\n\n![image-20250530131601992](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505301316272.png)\n\n​\t这个软件只需要提供 一个==视频主题== 或者 ==关键词==，就可以全自动生成一个高清短视频\n\n​\t但是由于本地部署电脑配置要求太高，没去部署\n\n### 2. Google AI Studio\n\n[视频/图片链接](https://aistudio.google.com/generate-video)\n\n\n\n## 二：任务一：AI文生图（免费）\n\n![image-20250603173122465](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031731573.png)\n\n使用谷歌Veo2模型来生成，效果是比较好的。\n\n\n\n## 三、任务二：Ai文生视频\n\n 谷歌Veo2文本生成视频，对于复杂的内容可能会出现偶尔生成失败的情况。\n\n![image-20250603175145429](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031751645.png)\n\n\n\n## 四、 AI生成PPT\n\n### 1、使用AIPPT\n\n![image-20250603180520453](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031805559.png)\n\n![image-20250603180624871](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031806971.png)\n\n![image-20250603180728752](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031807989.png)\n\n![image-20250603181450541](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031814004.png)\n\n### 2、使用DeepSeek ＋KiMi生成PPT\n\n![image-20250603182547316](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031825450.png)\n\n![image-20250603182613108](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031826211.png)\n\n![image-20250603182659803](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031826888.png)\n\n![image-20250603182916014](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031829129.png)\n\n![image-20250603183127503](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031831709.png)\n\n![image-20250603183325129](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202506031835152.png)\n","tags":["AI","视频生成"]},{"title":"Andesight_BP","url":"/2025/05/23/Andesight-BP/","content":"\n# Andesight 和 BP山景\n\n## 一、 Andesight 安装\n\n### 1. 选择你的文件夹所在地址作为工作空间\n\n![image-20250523153354713](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505231540502.png)\n\n### 2. 点击导入\n\n![image-20250523153502246](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505231535324.png)\n\n### 3. 点击常规 并选择现有\n\n![image-20250523153556762](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505251601452.png)\n\n### 4. 选择根目录 SDK\n\n![image-20250523153634958](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505231536037.png)\n\n## 5、 烧录\n\n![image-20250527182812803](./../../../../AppData/Roaming/Typora/typora-user-images/image-20250527182812803.png)\n\n","tags":["山景","Andesight"]},{"title":"Git","url":"/2025/05/21/Git/","content":"\n```\n在Public中\n连接仓库\ngit init\ngit remote add origin 地址\ngit checkout -b main                  \n```\n\n```\n上传GIt\ngit add .\ngit commit -m \"\"\n我这里需要连接到远程仓库 因为之前修改过的原因\ngit remote set-url origin https://github.com/Kingjt656/KingJt.github.io.git\ngit push --force origin main\n```\n","tags":["Git"]},{"title":"FreeRTOS","url":"/2025/05/21/FreeRTOS/","content":"\n# FreeRTOS\n\n## 一.FreeRTOS任务与中断服务程序\n\n### 1.cubemx配置注意事项\n\n![1746930754125](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417157.png)\n\n![1746930957686](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417275.png)\n\n可挂起的系统服务请求，这个中断用于上下文切换，在这个中断的ISR里决定哪个任务占用CPU，这一项的抢占优先级为15，最低优先级，只有在没有其他ISR的时候进行上下文的切换\n\n![1746931258951](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417225.png)\n\nTime base应该设置为最高的优先级 0 ，这样FreeRTOS就无法避免HAL库的基础时钟中断\n\n### 2.优先级管理和中断\n\n​\t注意：在FreeRTOS中，中断优先级的数值越小，优先级越高；\n\n​\t\t    而FreeRTOS的任务优先级是，任务优先级数值越小，任务优先级越低；\n\n![1746931983496](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417408.png)\n\n优先级0 ~ 4的中断是不受FreeRTOS的管理的，称为FreeRTOS不可屏蔽中断；优先级5 ~ 15 称为FreeRTOS可屏蔽中断\n\n![1746934996605](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417481.png)\n\neg:如果采用中断方式进行ADC数据采集时， 只需要在ADC的中断里将数据读到缓冲区，而对数据进行滤波或者频谱计算等耗时的工作，应该在任务函数中运行。这就涉及到中断ISR与任务函数之间的同步问题了，这就是进程间的通信问题\n\n\n\n### 3.中断屏蔽和临界代码段\n\n![1746960166187](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417565.png)\n\n在某些时候，任务的某段代码可能很关键，需要连续执行完，不希望被其他任务或中断打断，这种程序段称为临界段。\n\n![1747038838836](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417271.png)\n\n​        我们可以使用taskDISABLE_INTERRUPTS()来屏蔽MCU的部分中断，然后使用taskENABLE_INTERRUPTS()就可以解除屏蔽\n\n​        在临界代码段内，FreeRTOS会暂停任务调度，正在执行的任务是不会被更高优先级的任务抢占的，能够保证代码执行的连续性\n\n### 4.在ISR函数中使用FreeRTOS API函数\n\n![1747039685433](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417183.png)\n\n注意：在ISR中绝对不能使用任务级API函数，但是在任务函数中使用中断级API函数。而且，在FreeRTOS不能管理的高优先级中断的ISR里，连中断几API函数也不能使用\n\n进入和退出临界区之间不仅会屏蔽中断，也会关闭任务调度，使得中间的代码无法被其他的任务打断\n\n注意：我们不能在禁用中断的这个代码段 或者是临界区代码段，调用触发任务调度的函数如：vTaskDelay（）或者是申请信号量进行进程间同步的函数，因为发生任务调度时就会打开中断，从而就会失去定义中断、屏蔽代码段或临界代码段的意义\n\n\n\n## 二、进程间通信与消息队列\n\n### 1.进程间通信的基本概念以及消息队列的原理使用\n\n①消息队列是信号量 和 互斥量的基础\n\n②任务 和 ISR可以统称为进程\n\n![1747210322563](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417016.png)\n\n![1747210416864](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417339.png)\n\n ![1747210616550](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417063.png)\n\n二值信号量是没有优先级的继承机制，可能会出现优先级翻转问题\n\n互斥量：互斥量 和 递归互斥量\n\n互斥量可以用于互斥性共享资源的访问，互斥量具有优先级的继承机制，可以减轻优先级翻转问题\n\n![1747216525889](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417152.png)\n\n ### 2.队列的特点和基本操作\n\n![1747218372214](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417985.png)\n\n队列的存储单元可以设置任意大小，可以存储任意数据类型，例如存储一个复杂结构体的数据，队列存储数据采用数据复制的方式，如果数据量比较大，复制数据会占用较大的存储空间，所以如果传递的是比较大的数据：比如比较长的字符串或大的结构体，可以在队列的存储单元里存储需要传递数据的指针\n\n![1747220340932](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417963.png)\n\n![image-20250521142152925](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211421036.png)队列满时，才可以使用这个xQueueOverwrite，但是这个函数只能用于队列长度为1的队列，在队已满时，它会覆盖队列原来的数据\n\n其中xQueueReceive可以读取数据并删除已经读取的数据\n\n而xQueuePeek也可以读取数据，但是不能删除数据  \n\n![1747364953722](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417310.png)\n\n第一个vTaskDelay,让它每300ms只允许传入一个键值，也起到一个消抖的作用\n\n我们还需要考虑没有扫描到按键的情况，我们需要给它一个5ms的延时，让它处于阻塞状态，然后让其他的任务得以调度\n\n注意：在每个任务函数中，无论任务如果运行，都必须有一个延时，让其他的任务进行调度 \n\n## 三、信号量\n\n​\t\t有的时候进程间需要传递的只是一个标志，用于进程间同步 或 对一个共享资源的互斥性访问，这个时候就可以使用信号量和互斥量；信号量和互斥量的实现都是基于队列的。\n\n​\t\t信号量更适合用于进程间同步，而互斥量更适合用于共享资源的互斥性访问\n\n![1747552095441](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417620.png)\n\n![1747552153542](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417977.png)\n\n### 1、二值信号量\n\n​\t二值信号量就是只有一个项的队列。二值信号量就像一个标志，要么是空、要么是满，适合用于进程间同步的通信。所以说相当于只有0 和 1两种值\n\n### 2、计数型信号量\n\n​\t计数型信号量就是有固定长度的队列，每个项是一个标志。计数型信号量常用于多个共享资源的访问控制\n\n![1747565788527](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417955.png)\n\n​\t如果计数信号量的值为0，那么（以上4张桌子）的资源都被占用了，再有（客人）想进店，就需要等待；在任务中申请信号量时，可以设置超时等待时间，在等待时，任务就进入阻塞状态；当一个（客人）用餐结束就可以释放，也就是Give信号量，计数信号量的值加1，表示可用资源的数量增加了一个，这个适合就可以供其他的任务或者ISR来进行使用\n\n![image-20250522145256923](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505221452190.png)\n\n​\t注意：对于FromISR的函数，大部分都有一个参数，用来试图解决优先级翻转问题\n\n![image-20250522145450506](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505221454749.png)\n\n使用portYIELD_FROM_ISR函数，在可能的情况下进行一次任务调度\n\n![image-20250522145645413](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505221456653.png)\n\n只有在信号量不为空的时候，才需要释放信号量\n\n## 四、互斥量\n\n![image-20250522153947332](./../../../../AppData/Roaming/Typora/typora-user-images/image-20250522153947332.png)\n\n![1747567070728](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417004.png)\n\n​\t互斥量是对信号量的优化；信号量存在优先级翻转的问题，使得系统的实时性变差。互斥量引入了优先级集成机制，可以减缓优先级翻转问题,但是不能完全消除；\n\n![1747570441679](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211417849.png)\n\n### 1、二值信号量和互斥量的区别\n\n![1747570673697](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505221944293.png)\n\n​\t注意：互斥量不可以在ISR中使用，因为互斥量是具有任务的优先级的继承机制，而ISR不是任务。另外，ISR函数中不能设置阻塞等待时间，而获取互斥量时经常是需要等待的。\n\n### 2、递归互斥量\n\n![1747571101136](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211418537.png)\n\n![1747572966977](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505211418071.png)\n\n \t注意：xSemaphoreGive(xSemaphore) 这个函数不仅可以释放二值信号量，也可以释放计数信号量 和 互斥量，所以说xSemaphore可以是这三种对象的句柄\n\n​\t同样的，xSemaphoreTake（xSwemaphore,xBlockTime）不仅可以用于获取二值信号量，还可以用于获取计数信号量 和 互斥量\n\n![image-20250522165304687](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505221941187.png)\n\n获取信号量也有一个返回值，如果获取成功，则获取信号量函数的值为pdTRUE\n\n![image-20250522190204337](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505221941866.png)\n\n![image-20250522194807750](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505221948965.png)\n\n​\tTask_Middle is running打印两次，其中它是每500ms发送一次，我们可以看到低优先级获取信号量和释放信号量之间Task_Middle发送了两次消息，那在Task_Low释放了二值信号量之后，Task_High就立马抢占了运行，发送了一条Task_High Get token ，这个例子可以看到明显的优先级翻转现象\n\n​\t优先级翻转现象导致了高优先级的任务不能计时运行，违背了抢占式任务调度的设计初衷，对系统的实时性是不利的。\n\n![image-20250522201544169](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505222015259.png)\n\n​\t由于使用互  斥量，所以说高优先级任务在试图获取互斥量时，如果互斥量被Task_Low占用着，拿FreeRTOS会将它Task_Low的优先级临时提高到Task_High的优先级，这样在Task_Low占用互斥量的运行期间,Task_Middle就无法抢占CPU运行。\n\n​\t只有在Task_Low释放互斥量之后，Task_High才能抢占CPU立即运行\n\n​\t因此，使用互斥量就避免了高优先级任务被中等优先级任务插队运行的情况。\n\n## 五、事件组\n\n### 1、事件组概念\n\n​\t事件组使用与多个事件触发一个或多个任务的运行，可以实现事件的广播，还可以实现多个任务的同步运行\n\n![image-20250522203146760](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505222032741.png)\n\n​\t如果要处理多个事件，一般情况下，需要分解为多个任务，设置多个信号量；其次，可能有多个任务等待同一个事件的发生，但是在事件发生时，只能解除最高优先级的任务的阻塞状态，而不能同时解除多个任务的组设状态，也就是说 **队列** 或 **信号量** 具有排他性，不能解决某些特定的问题\n\n![image-20250522205153402](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505222051628.png)\n\n​\t事件组允许任务等待一个或多个事件的组合，事件组会解除所有等待同一事件的任务的阻塞状态\n\n![image-20250522210219714](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505222102870.png)\n\n![image-20250522211223957](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505222112184.png)\n\n​\t①事件标志只能是0 或 1，用单独的一个位来存储。\n\n​\t②如果一个事件位被设置为1，则表示这个事件发生了。反之，为0表示事件未发生\n\n​\t③32位的事件组最多可以处理24个事件。\n\n​\t④事件组具有广播功能，可以使多个任务同时解除阻塞后运行\n\n![image-20250523213107048](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505232131210.png)\n\n### 2. 事件组的多任务同步使用\n\n \t通过事件组进行多任务同步，在事件组的条件成立时，多个任务的阻塞状态可以同时解除，利用事件组的这个特性，可以实现多任务的同步。\n\n![image-20250523213608254](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505232136456.png)\n\n![image-20250523215423638](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505232154858.png)\n\n​\t多个任务在某个同步点同步运行\n\n​\t函数xEventGroupSync可以替代这两个函数实现一步操作，用于实现多任务之间的同步。\n\n## 六、 任务通知\n\n​\t使用任务通知，不需要创建任何的中间对象，可以直接从任务向任务，或者从ISR向任务发送通知，任务通知可以模拟二值信号量，计数信号量或者长度为1的消息队列。使用任务通知通常效率更高，消耗内存更少。\n\n![image-20250524140353049](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505241404904.png)\n\n![image-20250524140813177](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505241408428.png)\n\n![image-20250524140835507](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505241408715.png)\n\n​\t注意：发送者可以是任务和ISR，接收者只能是任务，不能是ISR\n\n![image-20250524142519872](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505241425106.png)\n\n​\t注意：任务通知的局限性：不能向ISR发送通知，只能是任务或ISR函数向任务发送通知\n\n### 1. 任务通知相关函数\n\n![image-20250524145718905](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505241457159.png)\n\n![image-20250524150111607](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505241501845.png)\n\n### 2. 任务通知传递数据\n\n​\t使用任务通知来传递数据，使用中断方式进行ADC，然后通过任务通知，将ADC转换结果作为通知值发送给另一个任务加以显示\n\n\n\n## 七、 软件定时器\n\n![image-20250525174932172](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505251749432.png)\n\n​\t定时器被创建后，有休眠 和 运行 两种状态；并且，处于休眠状态的定时器不会执行其回调函数；\n\n![image-20250525175245866](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505251752060.png)\n\n![image-20250525180256017](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505251802226.png)\n\n![image-20250525180557935](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505251805105.png)\n\n![image-20250526130513490](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505261305748.png)\n\n## 八、 韦东山笔记\n\n### 1、 各类方法的对比\n\n![image-20250528111144244](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505281111346.png)\n\n![image-20250528112020186](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505281120554.png)\n\n![image-20250528112610479](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505281126574.png)\n\n","tags":["FreeRTOS","实时操作系统"]},{"title":"音响硬件实习","url":"/2025/05/21/Music/","content":"\n# 音响硬件实习\n\n## 一、功放板选购\n\n```\n链接：以下\n```\n\n[功放板链接D800 - ](https://detail.1688.com/offer/796370077575.html?share_token=3xY4ketpfMvaENbRGbU9sQXC8mdgqgxW6hKqVop3T75CVNlcNbjvGw==&__share_id=9a6d948d-1141-4614-b2d1-0ffbe407dd4e&rpg-cnt=share.offerDetail&offerId=796370077575&__zhi_token=Gf24PCZ007zas&spm=a262eq.8992535/20250520.5103953.0)\n\n[功放板D1000](https://detail.1688.com/offer/861886414514.html?share_token=S+bh7nIMimb+68/jCmKYr88cpzMuBJbYdIfai76eemETLPOctuYRtg==&__share_id=138f3861-0a56-40c8-82df-a13f1f7ff399&rpg-cnt=share.offerDetail&offerId=861886414514&__zhi_token=zbln1gS64idaw&spm=a262eq.8992535/20250531.5103953.0)\n\n![image-20250603222854660](./../../../../AppData/Roaming/Typora/typora-user-images/image-20250603222854660.png)\n\n![image-20250520184824510](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505201848820.png)\n\n![image-20250520184937514](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505201849706.png)\n\n![image-20250520192243197](https://cdn.jsdelivr.net/gh/Kingjt656/tuchuang@main/img/202505201922370.png)\n\n### 🔧 一、功能模块详解\n\n### 1.1、主芯片（功放IC）\n\n​\t以上的功放板是基于**TPA3116D2**的多功能数字功放板，具有多个音频输入方式和多种调节功能，适用于DIY音箱、家庭影院、K歌设备等场景。\n\n①**TPA3116D2 ×2（双通道）**\n\n- 来自德州仪器（TI）的高性能D类数字功放芯片。\n- **支持双声道（立体声）或桥接模式**，50W + 50W + 100W。\n- **效率高、发热低、失真小**，适用于中小型功放应用。\n\n### 1.2、 电源输入\n\n- **支持12V~24V直流电源输入**\n  - 适配不同功率需求的音响系统。\n  - 输入电压越高，可驱动的扬声器功率越大。\n\n### 1.3、音频输出接口\n\n- **左声道、右声道、低音炮**输出端子（接喇叭）：\n\n  - 实现2.1声道输出，带有**独立的低音通道**（Subwoofer）；\n\n  其中2.1声道：**2.1声道输出**（左右声道+低音炮独立通道）\n\n  - 适合中高频+低音分频的音响结构，提高音质表现。\n\n### 1.4、音频输入方式：\n\n- **USB输入**：直接连接电脑或数字源播放；\n- **AUX输入**：3.5mm模拟音频输入；\n- **话筒模块接口**：可连接麦克风用于K歌；\n- **引线式按键板接口**：用于扩展遥控、模式切换等按键控制。\n\n### 🎛️ 二、调节功能详解\n\n### 2.1 功能旋钮（主板上）：\n\n| 调节项                 | 说明                                               |\n| ---------------------- | -------------------------------------------------- |\n| 低音炮频率（20-200Hz） | 调整低音通道的分频点；滤掉中高频信号，只输出低频。 |\n| SUBWOOFER 音量调节     | 控制低音炮输出音量。                               |\n| TREBLE（高音调节）     | 调节左右声道的高频增益，增强细节表现力。           |\n| BASS（低音调节）       | 调节左右声道的低频增益，增强低频厚度。             |\n| M-VOL（总音量+开关）   | 控制整机输出音量，并带电源开关功能。               |\n\n### 2.2 外接麦克风模块调节：\n\n| 接口            | 说明                           |\n| --------------- | ------------------------------ |\n| 麦克风接口D1/D2 | 插入话筒，进行语音输入或K歌；  |\n| 麦克风风量调节  | 调整话筒接收灵敏度（电平）     |\n| 麦克风音量调节  | 调整话筒声音在输出音频中的占比 |\n\n### 🔌 三、接口一览与连接方式\n\n| 名称                  | 功能                          |\n| --------------------- | ----------------------------- |\n| 左/右声道输出         | 接普通全频/高频喇叭           |\n| 低音输出（Sub）       | 接低音喇叭                    |\n| USB接口               | 音频输入接口（数字音频）      |\n| AUX接口               | 音频输入接口（模拟音频）      |\n| 麦克风接口 D1/D2      | 音频输入（人声）              |\n| 电源输入（DC 12~24V） | 提供整板供电                  |\n| 控制板扩展口          | 扩展物理按键板（播放/暂停等） |\n\n### 📚 四、相关知识点总结\n\n### 4.1 TPA3116D2 芯片知识\n\n- 属于D类（Class-D）数字功放；\n- 内建高效率开关电源转换器；\n- 优点：\n  - 高效率\n  - 体积小、发热低\n  - 支持双通道模式\n\n### 4.2 功放的基本概念\n\n| 概念              | 说明                                            |\n| ----------------- | ----------------------------------------------- |\n| 功放（Amplifier） | 把微弱音频信号放大到足以推动扬声器的电平。      |\n| 2.1声道           | 左声道+右声道+低音通道（独立Subwoofer）         |\n| 分频器            | 将不同频率段信号分送给不同扬声器（如高频/低频） |\n\n### 4.3 音频参数调节基础\n\n| 参数                    | 说明                                                         |\n| ----------------------- | ------------------------------------------------------------ |\n| 高音（Treble）          | 3KHz以上频率，提升清晰度和细节。                             |\n| 低音（Bass）            | 300Hz以下频率，提升沉浸感。                                  |\n| 总音量（Master Volume） | 控制整体输出电平。                                           |\n| 频率调节（低音分频）    | 影响低音通道的响应范围，低于设定频率的声音才会输出到低音炮。 |\n\n### 🔊 五、音频输出与功率参数\n\n| 参数                                    | 含义与作用                                                   |\n| --------------------------------------- | ------------------------------------------------------------ |\n| **声道数：2.1声道（50W + 50W + 100W）** | 2.1声道指的是： ① 左声道：最大50W ② 右声道：最大50W ③ 低音炮：最大100W                                                                          这种设计可以输出更加立体的音效，特别增强低频震撼感，适合观影和音乐。 |\n| **适配喇叭**                            | 左右声道：20-50W、4-8Ω 低音炮：100W、4-8Ω                                                                                                                              ➡ 匹配范围比较广，可以兼容多数常见音响单元（例如6.5寸、8寸、10寸喇叭等）。（5 ~ 6.5寸低音喇叭） |\n\n## 二、喇叭选购\n\n[喇叭-高音 2.5寸4欧姆 15W](https://m.1688.com/offer/741573652131.html?spm=a262to.11649712.wpAllOfferList_wangpu_score.0&__share_id=9c61b7b2-aa6e-4985-857d-07247c063589&callByHgJs=1&__removesafearea__=1&cbu_sv_id=ee222a83-1ef2-42be-9c0c-28089497b013&src_cna=ew6qIOSm2GIBASQIhFm54zEG&visitorId=ee222a83-1ef2-42be-9c0c-28089497b013)\n\n[喇叭-低音 5.25寸4欧姆 30w](https://detail.1688.com/offer/704974279847.html?spm=a262to.11649712.wpAllOfferList_wangpu_score.0&__share_id=9c61b7b2-aa6e-4985-857d-07247c063589&callByHgJs=1&__removesafearea__=1&cbu_sv_id=ee222a83-1ef2-42be-9c0c-28089497b013&src_cna=ew6qIOSm2GIBASQIhFm54zEG&visitorId=ee222a83-1ef2-42be-9c0c-28089497b013)\n\n[喇叭-低音 6.5寸4欧姆 40W](https://detail.1688.com/offer/763805762010.html?spm=a262to.11649712.wpAllOfferList_wangpu_score.0&__share_id=9c61b7b2-aa6e-4985-857d-07247c063589&callByHgJs=1&__removesafearea__=1&cbu_sv_id=ee222a83-1ef2-42be-9c0c-28089497b013&src_cna=ew6qIOSm2GIBASQIhFm54zEG&visitorId=ee222a83-1ef2-42be-9c0c-28089497b013)\n\n### 1. 不同喇叭类型特点比较\n\n| 类型                      | 特点                           | 适用场景                   |\n| ------------------------- | ------------------------------ | -------------------------- |\n| **全频喇叭（如15W款）**   | 可涵盖大部分频段（低~~中~~高） | 小音箱/广播/简单音乐播放   |\n| **中高音喇叭（如10W款）** | 强调高频细节，缺低音           | 高频补偿、报警提示、高音箱 |\n\n### 2. 功放芯片与喇叭匹配原则（以TPA3116D2为例）\n\n| 匹配要点       | 推荐范围                                | 错误搭配后果                   |\n| -------------- | --------------------------------------- | ------------------------------ |\n| **阻抗匹配**   | 4Ω                                      | >30Ω 时输出功率锐减，音量小    |\n| **功率匹配**   | 喇叭额定功率 ≈ 功放最大输出功率         | 功率不匹配易烧喇叭或音量不足   |\n| **灵敏度选择** | ≥85dB                                   | 低灵敏度喇叭声音小，需更大功率 |\n| **频响适配**   | 与应用场景匹配（如人声推荐120Hz~15kHz） | 高音不足或低音缺失             |\n\n### 3. 喇叭参数对比表\n\n| 参数     | 喇叭-高音 2.5寸4欧姆 15W | 喇叭-低音 5.25寸4欧姆 30w | 喇叭-低音 6.5寸4欧姆 40W |\n| -------- | ------------------------ | ------------------------- | ------------------------ |\n| 型号     | LY-0002800-3             | LY-0003146                | LY-0003735               |\n| 尺寸     | 口径67mm                 | 口径132.5mm               | 口径171mm                |\n| 额定功率 | 15W                      | 30W                       | 40W                      |\n| 阻抗     | 4Ω                       | 4Ω                        | 4Ω                       |\n| 频率响应 | 130Hz - 12KHz            | 57Hz – 2kHz               | 51Hz – 4.5kHz            |\n| 灵敏度   | 82 ± 2 dB                | 84 ± 2 dB                 | 84.5 ± 2 dB              |\n| 谐波失真 | 5%                       | 5%                        | 5%                       |\n| 磁路结构 | 外磁式                   | 外磁式                    | 外磁式                   |\n| 音圈     | 16芯                     | 20芯                      | 25芯                     |\n| 重量     | 0.23kg                   | 0.54kg                    | 0.886kg                  |\n| 频率特性 | 全频带（全音域）         | 中低频带                  | 中低频带                 |\n\n### 4. 核心参数对声音的影响\n\n| 参数                | 影响分析                                                     |\n| ------------------- | ------------------------------------------------------------ |\n| **尺寸（口径）**    | 决定喇叭推动空气量的能力。- 大尺寸（如6.5寸）→ 低频强、下潜深，有力感。- 小尺寸（如2.5寸）→ 高频响应更快，适合播放人声细节和高频延伸。 |\n| **额定功率**        | 表示喇叭长期工作的最大安全功率。- 功率越大，音响的动态余量越充足，爆发力更好。 |\n| **阻抗（4Ω）**      | 影响与功放的匹配。- 通常4Ω阻抗更容易被驱动，适合家用功放。- 多喇叭串联/并联时需注意总阻抗匹配。 |\n| **频率响应**        | 描述喇叭能发出声音的频率范围。- 响应范围越宽，声音层次越丰富。- 低频起点低（如51Hz）→ 低音更沉稳。- 高频终点高（如12kHz）→ 更有空气感、清晰度高。 |\n| **灵敏度（dB）**    | 表示喇叭发出相同音量所需输入功率的大小。- 数值越高，越容易出声（效率高）。- 82dB属中等偏低，适合安静环境；85dB以上则更省力。 |\n| **谐波失真（THD）** | 表示喇叭播放音频时的失真程度。- 5%为中等水平。- 失真越小，声音越纯净。 |\n| **磁路结构**        | 决定磁场强度和控制力。- 外磁式：结构简单，散热好，广泛用于家用音箱。- 内磁双磁：磁力集中，体积小，控制力更强，适合精细高频。 |\n| **音圈尺寸**        | 影响喇叭的功率承载与控制力。- 音圈越大→ 耐热能力强，控制低频更好。- 25芯适合高功率、大动态需求。 |\n| **重量**            | 一定程度反映磁体体积与用料。- 重量大，低频更有力，结构更稳固。- 太轻则音色可能发飘或单薄。 |\n\n\n\n## 三、壁挂音响\n\n【15周任务】喇叭厚度 不超过5cm 不是圆体壁挂音响 2 - 4个喇叭\n\nTPA芯片 - 音质\n\n","tags":["音响实习","功放板","喇叭"]}]